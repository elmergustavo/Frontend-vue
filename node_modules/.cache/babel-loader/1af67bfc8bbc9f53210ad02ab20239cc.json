{"ast":null,"code":"import { createStore } from \"vuex\";\nimport axios from \"axios\";\nimport Swal from \"sweetalert2\";\nexport default createStore({\n  state: {\n    state: {\n      token: null\n    }\n  },\n  getters: {},\n  mutations: {\n    setToken(state, payload) {\n      state.token = payload;\n    }\n\n  },\n  actions: {\n    async registerUser(commit, usuario) {\n      console.log(usuario);\n\n      try {\n        //const res = await fetch\n        const data = await axios.post(\"https://te-ayudo-api.herokuapp.com/user/register\", usuario);\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async iniciarSesion(commit, usuario) {\n      try {\n        //const res = await fetch\n        const data = await axios.post(\"http://localhost:3000/user/login\", usuario);\n        console.log(data.data.token);\n        commit('setToken', data.data.token);\n        localStorage.setItem(\"token\", data.data.token);\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    async registrarTutor(commit, tutor) {\n      let str = tutor.CoursesMaster;\n      let arr = str.split(',');\n      tutor.CoursesMaster = arr; //dividir la cadena de texto por una coma\n\n      console.log(arr);\n\n      try {\n        //const res = await fetch\n        const data = await axios.post(\"http://localhost:3000/tutor\", tutor);\n        Swal.fire('Good job!', 'You clicked the button!', 'success');\n        console.log(data);\n      } catch (error) {\n        console.log(error);\n      }\n    },\n\n    leerToken({\n      commit\n    }) {\n      if (localStorage.getItem('token')) {\n        commit();\n      }\n    }\n\n  },\n  modules: {}\n});","map":{"version":3,"sources":["C:/Users/ljrp3/Videos/Proyecto final web/Frontend-vue/src/store/index.js"],"names":["createStore","axios","Swal","state","token","getters","mutations","setToken","payload","actions","registerUser","commit","usuario","console","log","data","post","error","iniciarSesion","localStorage","setItem","registrarTutor","tutor","str","CoursesMaster","arr","split","fire","leerToken","getItem","modules"],"mappings":"AAAA,SAASA,WAAT,QAA4B,MAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,eAAeF,WAAW,CAAC;AACzBG,EAAAA,KAAK,EAAE;AACLA,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE;AADF;AADF,GADkB;AAMzBC,EAAAA,OAAO,EAAE,EANgB;AAOzBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,QAAQ,CAACJ,KAAD,EAAQK,OAAR,EAAiB;AACvBL,MAAAA,KAAK,CAACC,KAAN,GAAcI,OAAd;AACD;;AAHQ,GAPc;AAYzBC,EAAAA,OAAO,EAAE;AACP,UAAMC,YAAN,CAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AAClCC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,UAAI;AACF;AACA,cAAMG,IAAI,GAAG,MAAMd,KAAK,CAACe,IAAN,CACjB,kDADiB,EAEjBJ,OAFiB,CAAnB;AAKAC,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACD,OARD,CAQE,OAAOE,KAAP,EAAc;AACdJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF,KAdM;;AAgBP,UAAMC,aAAN,CAAoBP,MAApB,EAA4BC,OAA5B,EAAqC;AACnC,UAAI;AACF;AACA,cAAMG,IAAI,GAAG,MAAMd,KAAK,CAACe,IAAN,CACjB,kCADiB,EAEjBJ,OAFiB,CAAnB;AAKAC,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACA,IAAL,CAAUX,KAAtB;AAEAO,QAAAA,MAAM,CAAC,UAAD,EAAaI,IAAI,CAACA,IAAL,CAAUX,KAAvB,CAAN;AAEAe,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BL,IAAI,CAACA,IAAL,CAAUX,KAAxC;AAED,OAbD,CAaE,OAAOa,KAAP,EAAc;AACdJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF,KAjCM;;AAmCP,UAAMI,cAAN,CAAqBV,MAArB,EAA6BW,KAA7B,EAAoC;AAKlC,UAAIC,GAAG,GAAGD,KAAK,CAACE,aAAhB;AACA,UAAIC,GAAG,GAAGF,GAAG,CAACG,KAAJ,CAAU,GAAV,CAAV;AACAJ,MAAAA,KAAK,CAACE,aAAN,GAAsBC,GAAtB,CAPkC,CAQlC;;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYW,GAAZ;;AACA,UAAI;AACF;AACA,cAAMV,IAAI,GAAG,MAAMd,KAAK,CAACe,IAAN,CACjB,6BADiB,EAEjBM,KAFiB,CAAnB;AAKApB,QAAAA,IAAI,CAACyB,IAAL,CACE,WADF,EAEE,yBAFF,EAGE,SAHF;AAKAd,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACD,OAbD,CAaE,OAAOE,KAAP,EAAc;AACdJ,QAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF,KA7DM;;AA+DPW,IAAAA,SAAS,CAAC;AAACjB,MAAAA;AAAD,KAAD,EAAU;AACvB,UAAGQ,YAAY,CAACU,OAAb,CAAqB,OAArB,CAAH,EAAiC;AAE/BlB,QAAAA,MAAM;AACP;AAEI;;AArEM,GAZgB;AAoFzBmB,EAAAA,OAAO,EAAE;AApFgB,CAAD,CAA1B","sourcesContent":["import { createStore } from \"vuex\";\r\nimport axios from \"axios\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nexport default createStore({\r\n  state: {\r\n    state: {\r\n      token: null,\r\n    },\r\n  },\r\n  getters: {},\r\n  mutations: {\r\n    setToken(state, payload) {\r\n      state.token = payload;\r\n    },\r\n  },\r\n  actions: {\r\n    async registerUser(commit, usuario) {\r\n      console.log(usuario);\r\n      try {\r\n        //const res = await fetch\r\n        const data = await axios.post(\r\n          \"https://te-ayudo-api.herokuapp.com/user/register\",\r\n          usuario\r\n        );\r\n\r\n        console.log(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n\r\n    async iniciarSesion(commit, usuario) {\r\n      try {\r\n        //const res = await fetch\r\n        const data = await axios.post(\r\n          \"http://localhost:3000/user/login\",\r\n          usuario\r\n        );\r\n\r\n        console.log(data.data.token);\r\n\r\n        commit('setToken', data.data.token )\r\n\r\n        localStorage.setItem(\"token\", data.data.token);\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n\r\n    async registrarTutor(commit, tutor) {\r\n\r\n     \r\n      \r\n\r\n      let str = tutor.CoursesMaster;\r\n      let arr = str.split(','); \r\n      tutor.CoursesMaster = arr\r\n      //dividir la cadena de texto por una coma\r\n      console.log(arr);\r\n      try {\r\n        //const res = await fetch\r\n        const data = await axios.post(\r\n          \"http://localhost:3000/tutor\",\r\n          tutor\r\n        );\r\n\r\n        Swal.fire(\r\n          'Good job!',\r\n          'You clicked the button!',\r\n          'success'\r\n        )\r\n        console.log(data);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n\r\n    leerToken({commit}){\r\nif(localStorage.getItem('token')){\r\n\r\n  commit()\r\n}\r\n\r\n    }\r\n\r\n  },\r\n  modules: {},\r\n});\r\n"]},"metadata":{},"sourceType":"module"}